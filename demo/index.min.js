import { css, LitElement, html } from 'lit';
import { classMap } from 'lit/directives/class-map.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import 'focus-visible/dist/focus-visible.min.js';
import AuroLibraryRuntimeUtils from '@aurodesignsystem/auro-library/scripts/utils/runtimeUtils.mjs';
import AuroFormValidation from '@aurodesignsystem/auro-formvalidation/src/validation.js';

var styleCss$1 = css`*,*:before,*:after{box-sizing:border-box}@media(prefers-reduced-motion: reduce){*,*:before,*:after{animation-duration:.01ms !important;animation-iteration-count:1 !important;transition-duration:.01ms !important}}*:focus-visible{outline:0}*:focus-visible{outline:0}:focus:not(:focus-visible){outline:3px solid transparent}.util_displayInline{display:inline}.util_displayInlineBlock{display:inline-block}.util_displayBlock{display:block}.util_displayFlex{display:flex}.util_displayHidden{display:none}.util_displayHiddenVisually{position:absolute;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);width:1px;height:1px;padding:0;border:0}:host{display:block;outline:unset}:host(.focus-visible) .displayFlex .inputGroup:focus-within{width:auto}:host(.focus-visible) .rdoGroup{display:block;padding-right:var(--ds-size-100, 0.5rem);outline:3px solid transparent}:host(.focus-visible) .rdoGroup .label:after{outline-width:1px;outline-style:solid}.rdoGroup{position:relative;padding-right:var(--ds-size-100, 0.5rem);padding-left:var(--ds-size-100, 0.5rem);line-height:var(--ds-size-400, 2rem)}.label{display:block;margin-left:var(--ds-size-300, 1.5rem)}.label:hover{cursor:pointer}.label:after{position:absolute;z-index:1;top:var(--ds-size-50, 0.25rem);left:var(--ds-size-50, 0.25rem);width:calc(var(--ds-size-200, 1rem) + var(--ds-size-50, 0.25rem));height:calc(var(--ds-size-200, 1rem) + var(--ds-size-50, 0.25rem));content:"";border-radius:50%;border:1px solid}.slotContent{display:block;margin-left:var(--ds-size-400, 2rem);padding-left:var(--ds-size-100, 0.5rem)}`;

var colorCss$1 = css`.label{color:var(--ds-auro-radio-label-color)}.label:after{background-color:var(--ds-auro-radio-btn-fill-color);border-color:var(--ds-auro-radio-btn-border-color);box-shadow:inset 0 0 0 3px var(--ds-auro-radio-btn-inset-color);outline-color:var(--ds-auro-radio-btn-border-color);-webkit-tap-highlight-color:var(--ds-auro-radio-tap-color)}:host([checked]){--ds-auro-radio-btn-inset-color: var(--ds-color-background-primary-100-default, #ffffff);--ds-auro-radio-btn-fill-color: var(--ds-color-border-ui-default-default);--ds-auro-radio-btn-border-color: var(--ds-color-border-ui-default-default)}:host([error]){--ds-auro-radio-btn-border-color: var(--ds-color-border-error-default, #cc1816)}:host([checked][error]){--ds-auro-radio-btn-fill-color: var(--ds-color-border-error-default, #cc1816)}:host([disabled]){--ds-auro-radio-btn-border-color: var(--ds-color-border-ui-disabled-default, #adadad)}:host(.focus-visible){--ds-auro-radio-btn-border-color: var(--ds-color-border-ui-default-default, #2c67b5)}`;

var tokenCss = css`:host{--ds-auro-radio-group-help-text-color: var(--ds-color-text-secondary-default, $ds-color-text-secondary-default);--ds-auro-radio-group-label-color: inherit;--ds-auro-radio-btn-border-color: var(--ds-color-border-primary-default, $ds-color-border-primary-default);--ds-auro-radio-btn-fill-color: transparent;--ds-auro-radio-btn-inset-color: transparent;--ds-auro-radio-label-color: inherit;--ds-auro-radio-tap-color: transparent}`;

// Copyright (c) 2020 Alaska Airlines. All right reserved. Licensed under the Apache-2.0 license
// See LICENSE in the project root for license information.


/**
 * @attr {Boolean} checked - If set to true, the radio button will be filled.
 * @attr {Boolean} disabled - If set to true, the radio button will be non-clickable.
 * @attr {Boolean} required - Defines element as required.
 * @attr {Boolean} error - If set to true, sets an error state on the radio button.
 * @event toggleSelected - Notifies that the component has toggled the checked/selected state.
 * @event focusSelected - Notifies that the component has gained focus.
 * @event auroRadio-blur - Notifies that the component has lost focus.
 * @event resetRadio - Notifies that the component has reset the checked/selected state.
 * @event auroRadio-selected - Notifies that the component has been marked as checked/selected.
 */

// build the component class
class AuroRadio extends LitElement {
  constructor() {
    super();
    this.checked = false;
    this.disabled = false;
    this.required = false;
    this.error = false;
    this.tabIndex = -1;

    /**
     * @private
     */
    this.runtimeUtils = new AuroLibraryRuntimeUtils();
  }

  static get styles() {
    return [
      styleCss$1,
      colorCss$1,
      tokenCss
    ];
  }

  // function to define props used within the scope of this component
  static get properties() {
    return {
      checked: {
        type: Boolean,
        reflect: true
      },
      disabled: {
        type: Boolean,
        reflect: true
      },
      required: {
        type: Boolean,
        reflect: true
      },
      error: {
        type: Boolean,
        reflect: true
      },
      id:       { type: String },
      label:    { type: String },
      name:     { type: String },
      value:    { type: String },
      tabIndex: {
        type: Number,
        reflect: true
      }
    };
  }

  /**
   * This will register this element with the browser.
   * @param {string} [name="auro-radio"] - The name of element that you want to register to.
   *
   * @example
   * AuroRadio.register("custom-radio") // This will resgiter this element to <custom-radio/>
   *
   */
  static register(name = "auro-radio") {
    AuroLibraryRuntimeUtils.prototype.registerComponent(name, AuroRadio);
  }

  /**
   * Method for handling content when change event is fired.
   * @private
   * @param {Event} event - The trigger event tied to this function.
   * @returns {void}
   */
  handleChange(event) {
    this.checked = event.target.checked;
    const customEvent = new CustomEvent(event.type, event);

    this.dispatchEvent(customEvent);
  }

  /**
   * Method for handling content when input event is fired.
   * @private
   * @param {Event} event - The trigger event tied to this function.
   * @returns {void}
   */
  handleInput(event) {
    this.checked = event.target.checked;
    this.dispatchEvent(new CustomEvent('toggleSelected', {
      bubbles: true,
      composed: true,
      target: this
    }));
  }

  /**
   * Method for handling focus event.
   * @private
   * @param {Event} event - The trigger event tied to this function.
   * @returns {void}
   */
  handleFocus(event) {
    this.dispatchEvent(new CustomEvent('focusSelected', {
      bubbles: true,
      composed: true,
      target: event.target
    }));
  }

  /**
   * Method for handling blur event.
   * @private
   * @param {Event} event - The trigger event tied to this function.
   * @returns {void}
   */
  handleBlur(event) {
    this.dispatchEvent(new CustomEvent('auroRadio-blur', {
      bubbles: true,
      composed: true,
      target: event.target
    }));
  }

  updated(changedProperties) {
    if (changedProperties.has('checked')) {
      this.dispatchEvent(new CustomEvent('resetRadio', {
        bubbles: true,
        composed: true
      }));

      if (this.checked) {
        this.dispatchEvent(new CustomEvent('auroRadio-selected', {
          bubbles: true,
          composed: true
        }));
      }
    }
  }

  /**
   * Method for handling content when it is invalid accessibility wise.
   * @private
   * @param {Boolean} error - The element's error attribute.
   * @returns {void}
   */
  invalid(error) {
    if (error) {
      return 'true';
    }

    return 'false';
  }

  /**
   * Method for handling passing the required status to aria.
   * @private
   * @param {Boolean} required - The element's required attribute.
   * @returns {void}
   */
  isRequired(required) {
    if (required) {
      return 'true';
    }

    return 'false';
  }

  firstUpdated() {
    // Add the tag name as an attribute if it is different than the component name
    this.runtimeUtils.handleComponentTagRename(this, 'auro-radio');

    this.addEventListener('blur', this.handleBlur);

    this.input = this.shadowRoot.querySelector('input');

    this.addEventListener('click', () => {
      this.input.click();
    });
  }

  // function that renders the HTML and CSS into  the scope of the component
  render() {
    const labelClasses = {
      'ods-inputLabel': true,
      'ods-inputLabel--radio': true,
      'label': true,
      'label--rdo': true,
      'errorBorder': this.error
    };

    return html`
      <div class="ods-inputGroup rdoGroup">
        <input
          class="util_displayHiddenVisually ods-inputOption rdo--input"
          @focus="${this.handleFocus}"
          @input="${this.handleInput}"
          @change="${this.handleChange}"
          ?disabled="${this.disabled}"
          aria-invalid="${this.invalid(this.error)}"
          aria-required="${this.isRequired(this.required)}"
          .checked="${this.checked}"
          id="${ifDefined(this.id)}"
          name="${ifDefined(this.name)}"
          type="radio"
          .value="${this.value}"
          tabIndex="-1"
        />

        <label for="${ifDefined(this.id)}" class="${classMap(labelClasses)}">
          <slot>${this.label}</slot>
        </label>

      </div>
      <slot name="content" class="slotContent"></slot>
    `;
  }
}

var styleCss = css`:host{display:block;padding-bottom:var(--ds-size-150, 0.75rem)}fieldset{all:unset}.displayFlex legend+slot{display:flex;white-space:nowrap}legend{margin-bottom:var(--ds-size-150, 0.75rem)}`;

var colorCss = css`:host legend{color:var(--ds-auro-radio-group-label-color)}:host([disabled]){--ds-auro-radio-group-label-color: var(--ds-color-text-disabled-default, $ds-color-text-disabled-default)}.radioGroupElement-helpText{color:var(--ds-auro-radio-group-help-text-color)}:host([validity]:not([validity=valid])){--ds-auro-radio-group-help-text-color: var(--ds-color-alert-error-default, #df0b37)}`;

// Copyright (c) Alaska Air. All right reserved. Licensed under the Apache-2.0 license
// See LICENSE in the project root for license information.
// ---------------------------------------------------------------------



/* eslint no-magic-numbers: ["error", { "ignore": [0, 1, -1] }] */
/* eslint-disable max-lines */

/**
 * @attr {String} validity - Specifies the `validityState` this element is in.
 * @attr {String} setCustomValidity - Sets a custom help text message to display for all validityStates.
 * @attr {String} setCustomValidityCustomError - Custom help text message to display when validity = `customError`.
 * @attr {String} setCustomValidityValueMissing - Custom help text message to display when validity = `valueMissing`.
 * @attr {String} error - When defined, sets persistent validity to `customError` and sets `setCustomValidity` = attribute value.
 * @attr {Boolean} noValidate - If set, disables auto-validation on blur.
 * @attr {Boolean} required - Populates the `required` attribute on the element. Used for client-side validation.
 * @attr {Object} optionSelected - Specifies the current selected radio button.
 * @csspart radio-group - Apply css to the fieldset element in the shadow DOM
 * @slot {HTMLSlotElement} legend - Allows for the legend to be overridden.
 * @slot {HTMLSlotElement} optionalLabel - Allows for the optional label to be overridden.
 * @slot {HTMLSlotElement} helpText - Allows for the helper text to be overridden.
 * @event auroFormElement-validated - Notifies that the element has been validated.
 */

class AuroRadioGroup extends LitElement {
  constructor() {
    super();
    this.disabled = false;
    this.horizontal = false;
    this.required = false;
    this.validity = undefined;
    this.value = undefined;
    this.optionSelected = undefined;

    /**
     * @private
     */
    this.validation = new AuroFormValidation();

    /**
     * @private
     */
    this.index = 0;

    /**
     * @private
     */
    this.max = 3;

    /**
     * @private
     */
    this.runtimeUtils = new AuroLibraryRuntimeUtils();
  }

  static get styles() {
    return [
      styleCss,
      colorCss,
      tokenCss
    ];
  }

  static get properties() {
    return {
      disabled:   {
        type: Boolean,
        reflect: true
      },
      horizontal: { type: Boolean },
      error:      {
        type: String,
        reflect: true
      },
      value: {
        type: Array
      },
      noValidate: {
        type: Boolean,
        reflect: true
      },
      required: {
        type: Boolean,
        reflect: true
      },
      setCustomValidity: {
        type: String
      },
      setCustomValidityCustomError: {
        type: String
      },
      setCustomValidityValueMissing: {
        type: String
      },
      validity: {
        type: String,
        reflect: true
      },
      optionSelected: {
        type: Object
      }
    };
  }

  /**
   * This will register this element with the browser.
   * @param {string} [name="auro-radio-group"] - The name of element that you want to register to.
   *
   * @example
   * AuroRadioGroup.register("custom-radio-group") // This will register this element to <custom-radio-group/>
   *
   */
  static register(name = "auro-radio-group") {
    AuroLibraryRuntimeUtils.prototype.registerComponent(name, AuroRadioGroup);
  }

  connectedCallback() {
    super.connectedCallback();
    this.handleItems();
    this.addEventListener('toggleSelected', this.handleToggleSelected);
    this.addEventListener('keydown', this.handleKeyDown);
    this.addEventListener('resetRadio', this.resetRadio);
    this.addEventListener('auroRadio-blur', this.handleRadioBlur);
    this.addEventListener('auroRadio-selected', this.handleSelection);
  }

  firstUpdated() {
    // Add the tag name as an attribute if it is different than the component name
    this.runtimeUtils.handleComponentTagRename(this, 'auro-radio-group');
  }

  /**
   * Method for handling of selection of a radio element.
   * @private
   * @param {Event} event - The trigger event tied to this function.
   * @returns {void}
   */
  handleSelection(event) {
    if (event.target.value) {
      this.value = event.target.value;
    } else {
      this.value = '';
    }

    this.optionSelected = event.target;

    this.validation.validate(this);
  }

  /**
   * Method handles radio element blur.
   * @private
   * @returns {void}
   */
  handleRadioBlur() {
    if (this.value === undefined) {
      this.value = '';
    }

    this.validation.validate(this);
  }

  /**
   * LitElement lifecycle method. Called after the DOM has been updated.
   * @param {Map<string, any>} changedProperties - Keys are the names of changed properties, values are the corresponding previous values.
   * @returns {void}
   */
  updated(changedProperties) {
    if (changedProperties.has('disabled')) {
      // only change the children if we are making everything disabled, or if we are making everything enabled and there are no individually-disabled radio buttons
      if (this.disabled || this.items.every((el) => el.disabled)) {
        this.items.forEach((el) => {
          el.disabled = this.disabled;
        });
      }
    }

    if (changedProperties.has('required')) {
      this.items.forEach((el) => {
        el.required = this.required;
      });
    }

    if (changedProperties.has('error')) {
      this.validation.validate(this, true);
    }

    if (changedProperties.has('validity')) {
      if (this.validity && this.validity !== 'valid') {
        this.items.forEach((el) => {
          el.setAttribute('error', true);
        });
      } else {
        this.items.forEach((el) => {
          el.removeAttribute('error');
        });
      }
    }
  }

  /**
   * Method for a total reset of the radio element.
   * @returns {void}
   */
  reset() {
    this.value = undefined;
    this.index = 0;
    this.optionSelected = undefined;
    const buttons = this.querySelectorAll('auro-radio, [auro-radio]');

    buttons.forEach((button) => {
      button.checked = false;
    });

    this.validation.validate(this);
  }

  /**
   * Method handles the reset event from a radio element.
   * @private
   * @returns {void}
   */
  resetRadio() {
    if (this.items.length === 0) {
      this.handleItems();
    }

    // handle tab index
    this.items.forEach((item) => {
      item.tabIndex = -1;
    });

    if (!this.disabled) {
      this.items[this.index].tabIndex = 0;
    }
  }

  /**
   * Method for handling the attributes of each radio input.
   * @private
   * @returns {void}
   */
  handleItems() {
    this.items = [...this.querySelectorAll(':scope > *:not([slot])')];
    this.initializeIndex();

    if (this.disabled) {
      this.items.forEach((el) => {
        el.disabled = this.disabled;
      });
    }

    this.items.forEach((el) => {
      el.required = this.required;
      el.error = Boolean(this.error);
    });
  }

  /**
   * Method for handling slot content changes.
   * @private
   * @returns {void}
   */
  handleSlotChange() {
    this.handleItems();
  }

  /**
   * Method for initializing the tab index of the checked radio input.
   * @private
   * @returns {void}
   */
  initializeIndex() {
    if (!this.disabled) {
      const index = this.items.findIndex((item) => item.hasAttribute('checked') && !item.hasAttribute('disabled'));
      const nextEnabledIndex = this.items.findIndex((item) => !item.hasAttribute('disabled'));

      this.index = index >= 0 ? index : nextEnabledIndex;

      if (this.index >= 0) {
        this.items[this.index].tabIndex = 0;
      }
    }
  }

  /**
   * Method for handling a newly selected radio input.
   * @private
   * @param {Event} event - The trigger event tied to this function.
   * @returns {void}
   */
  handleToggleSelected(event) {
    this.index = this.items.indexOf(event.target);

    this.items.forEach((item) => {
      if (item === event.target) {
        item.tabIndex = 0;
        if (event.target.value) {
          this.value = event.target.value;
        }
      } else {
        const sdInput = item.shadowRoot.querySelector('input');

        sdInput.checked = false;
        item.checked = false;
        item.tabIndex = -1;
      }
    });

    this.optionSelected = event.target;

    this.validation.validate(this);
  }

  /**
   * Method for selecting a radio input.
   * @private
   * @param {Number} index - The value of the element's index attribute.
   * @returns {void}
   */
  selectItem(index) {
    const sdItem = this.items[index].shadowRoot.querySelector('input');

    sdItem.click();
    sdItem.focus();
    this.index = index;
  }

  /**
   * Method for selecting the next radio input.
   * @private
   * @param {Number} index - The value of the element's index attribute.
   * @param {String} moveDirection - Arrow key pressed by user.
   * @returns {void}
   */
  selectNextItem(index, moveDirection) {
    let currIndex = index;

    for (currIndex; currIndex < this.items.length; moveDirection === "Down" ? currIndex += 1 : currIndex -= 1) {
      currIndex = currIndex === -1 ? this.items.length - 1 : currIndex;
      const sdItem = this.items[currIndex].shadowRoot.querySelector('input');

      if (this.disabled || this.items.every((item) => item.disabled === true)) {
        sdItem.focus();
        break;
      }
      if (!sdItem.disabled) {
        sdItem.click();
        sdItem.focus();
        this.index = currIndex;
        break;
      }
    }
  }

  /**
   * Method for handling a keydown event.
   * @private
   * @param {Event} event - The trigger event tied to this function.
   * @returns {void}
   */
  handleKeyDown(event) {
    switch (event.key) {
      case " ":
        event.preventDefault();
        this.selectItem(this.index);
        break;

      case "Down":
      case "ArrowDown":
      case "Right":
      case "ArrowRight":
        event.preventDefault();
        this.selectNextItem(this.index === this.items.length - 1 ? 0 : this.index + 1, "Down");
        break;

      case "Up":
      case "ArrowUp":
      case "Left":
      case "ArrowLeft":
        event.preventDefault();
        this.selectNextItem(this.index === 0 ? this.items.length - 1 : this.index - 1, "Up");
        break;
    }
  }

  // function that renders the HTML and CSS into  the scope of the component
  render() {
    const groupClasses = {
      'displayFlex': this.horizontal && this.items.length <= this.max
    };

    return html`
      <fieldset class="${classMap(groupClasses)}" part="radio-group">
        ${this.required
        ? html`<legend><slot name="legend"></slot></legend>`
        : html`<legend><slot name="legend"></slot> <slot name="optionalLabel">(optional)</slot></legend>`
      }
        <slot @slotchange=${this.handleSlotChange}></slot>
      </fieldset>

      ${!this.validity || this.validity === undefined || this.validity === 'valid'
        ? html`
          <p class="radioGroupElement-helpText" part="helpText">
            <slot name="helpText"></slot>
          </p>`
        : html`
          <p class="radioGroupElement-helpText" role="alert" aria-live="assertive" part="helpText">
            ${this.setCustomValidity}
          </p>`
      }
    `;
  }
}

AuroRadio.register();
AuroRadioGroup.register();

AuroRadio.register('custom-radio');
AuroRadioGroup.register('custom-radio-group');
